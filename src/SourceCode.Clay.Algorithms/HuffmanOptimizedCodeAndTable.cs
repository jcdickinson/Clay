#region License

// Copyright (c) K2 Workflow (SourceCode Technology Holdings Inc.). All rights reserved.
// Licensed under the MIT License. See LICENSE file in the project root for full license information.

#endregion

namespace SourceCode.Clay.Algorithms
{
    /// <summary>
    /// 
    /// </summary>
    public static class HuffmanOptimizedCodeAndTable
    {
        // TODO: this can be constructed from _decodingTable
        private static readonly (uint code, int bitLength)[] s_encodingTable = new (uint code, int bitLength)[]
        {
            // 0
            (0b11111111_11000000_00000000_00000000, 13),

            // 1
            (0b11111111_11111111_10110000_00000000, 23),
            (0b11111111_11111111_11111110_00100000, 28),
            (0b11111111_11111111_11111110_00110000, 28),
            (0b11111111_11111111_11111110_01000000, 28),
            (0b11111111_11111111_11111110_01010000, 28),
            (0b11111111_11111111_11111110_01100000, 28),
            (0b11111111_11111111_11111110_01110000, 28),
            (0b11111111_11111111_11111110_10000000, 28),
            (0b11111111_11111111_11101010_00000000, 24),
            (0b11111111_11111111_11111111_11110000, 30),

            // 11
            (0b11111111_11111111_11111110_10010000, 28),
            (0b11111111_11111111_11111110_10100000, 28),
            (0b11111111_11111111_11111111_11110100, 30),
            (0b11111111_11111111_11111110_10110000, 28),
            (0b11111111_11111111_11111110_11000000, 28),
            (0b11111111_11111111_11111110_11010000, 28),
            (0b11111111_11111111_11111110_11100000, 28),
            (0b11111111_11111111_11111110_11110000, 28),
            (0b11111111_11111111_11111111_00000000, 28),
            (0b11111111_11111111_11111111_00010000, 28),

            // 21
            (0b11111111_11111111_11111111_00100000, 28),
            (0b11111111_11111111_11111111_11111000, 30),
            (0b11111111_11111111_11111111_00110000, 28),
            (0b11111111_11111111_11111111_01000000, 28),
            (0b11111111_11111111_11111111_01010000, 28),
            (0b11111111_11111111_11111111_01100000, 28),
            (0b11111111_11111111_11111111_01110000, 28),
            (0b11111111_11111111_11111111_10000000, 28),
            (0b11111111_11111111_11111111_10010000, 28),
            (0b11111111_11111111_11111111_10100000, 28),

            // 31
            (0b11111111_11111111_11111111_10110000, 28),
            (0b01010000_00000000_00000000_00000000, 6),  // <space>
            (0b11111110_00000000_00000000_00000000, 10), // !
            (0b11111110_01000000_00000000_00000000, 10), // "
            (0b11111111_10100000_00000000_00000000, 12), // #
            (0b11111111_11001000_00000000_00000000, 13), // $
            (0b01010100_00000000_00000000_00000000, 6),  // %
            (0b11111000_00000000_00000000_00000000, 8),  // &
            (0b11111111_01000000_00000000_00000000, 11), // '
            (0b11111110_10000000_00000000_00000000, 10), // (

            // 41
            (0b11111110_11000000_00000000_00000000, 10), // )
            (0b11111001_00000000_00000000_00000000, 8),  // *
            (0b11111111_01100000_00000000_00000000, 11), // +
            (0b11111010_00000000_00000000_00000000, 8),  // ,
            (0b01011000_00000000_00000000_00000000, 6),  // -
            (0b01011100_00000000_00000000_00000000, 6),  // .
            (0b01100000_00000000_00000000_00000000, 6),  // /
            (0b00000000_00000000_00000000_00000000, 5),  // 0
            (0b00001000_00000000_00000000_00000000, 5),  // 1
            (0b00010000_00000000_00000000_00000000, 5),  // 2

            // 51
            (0b01100100_00000000_00000000_00000000, 6),  // 3
            (0b01101000_00000000_00000000_00000000, 6),  // 4
            (0b01101100_00000000_00000000_00000000, 6),  // 5
            (0b01110000_00000000_00000000_00000000, 6),  // 6
            (0b01110100_00000000_00000000_00000000, 6),  // 7
            (0b01111000_00000000_00000000_00000000, 6),  // 8
            (0b01111100_00000000_00000000_00000000, 6),  // 9
            (0b10111000_00000000_00000000_00000000, 7),  // :
            (0b11111011_00000000_00000000_00000000, 8),  // ;
            (0b11111111_11111000_00000000_00000000, 15), // <

            // 61
            (0b10000000_00000000_00000000_00000000, 6),  // =
            (0b11111111_10110000_00000000_00000000, 12), // >
            (0b11111111_00000000_00000000_00000000, 10), // ?
            (0b11111111_11010000_00000000_00000000, 13), // @
            (0b10000100_00000000_00000000_00000000, 6),  // A
            (0b10111010_00000000_00000000_00000000, 7),  // B
            (0b10111100_00000000_00000000_00000000, 7),  // C
            (0b10111110_00000000_00000000_00000000, 7),  // D
            (0b11000000_00000000_00000000_00000000, 7),  // E
            (0b11000010_00000000_00000000_00000000, 7),  // F
                                                         
            // 71                                        
            (0b11000100_00000000_00000000_00000000, 7),  // G
            (0b11000110_00000000_00000000_00000000, 7),  // H
            (0b11001000_00000000_00000000_00000000, 7),  // I
            (0b11001010_00000000_00000000_00000000, 7),  // J
            (0b11001100_00000000_00000000_00000000, 7),  // K
            (0b11001110_00000000_00000000_00000000, 7),  // L
            (0b11010000_00000000_00000000_00000000, 7),  // M
            (0b11010010_00000000_00000000_00000000, 7),  // N
            (0b11010100_00000000_00000000_00000000, 7),  // O
            (0b11010110_00000000_00000000_00000000, 7),  // P
                                                         
            // 81                                        
            (0b11011000_00000000_00000000_00000000, 7),  // Q
            (0b11011010_00000000_00000000_00000000, 7),  // R
            (0b11011100_00000000_00000000_00000000, 7),  // S
            (0b11011110_00000000_00000000_00000000, 7),  // T
            (0b11100000_00000000_00000000_00000000, 7),  // U
            (0b11100010_00000000_00000000_00000000, 7),  // V
            (0b11100100_00000000_00000000_00000000, 7),  // W
            (0b11111100_00000000_00000000_00000000, 8),  // X
            (0b11100110_00000000_00000000_00000000, 7),  // Y
            (0b11111101_00000000_00000000_00000000, 8),  // Z 

            // 91
            (0b11111111_11011000_00000000_00000000, 13), // [
            (0b11111111_11111110_00000000_00000000, 19), // \
            (0b11111111_11100000_00000000_00000000, 13), // ]
            (0b11111111_11110000_00000000_00000000, 14), // ^
            (0b10001000_00000000_00000000_00000000, 6),  // _
            (0b11111111_11111010_00000000_00000000, 15), // `
            (0b00011000_00000000_00000000_00000000, 5),  // a
            (0b10001100_00000000_00000000_00000000, 6),  // b
            (0b00100000_00000000_00000000_00000000, 5),  // c
            (0b10010000_00000000_00000000_00000000, 6),  // d

            // 101
            (0b00101000_00000000_00000000_00000000, 5),  // e
            (0b10010100_00000000_00000000_00000000, 6),  // f
            (0b10011000_00000000_00000000_00000000, 6),  // g
            (0b10011100_00000000_00000000_00000000, 6),  // h
            (0b00110000_00000000_00000000_00000000, 5),  // i
            (0b11101000_00000000_00000000_00000000, 7),  // j
            (0b11101010_00000000_00000000_00000000, 7),  // k
            (0b10100000_00000000_00000000_00000000, 6),  // l
            (0b10100100_00000000_00000000_00000000, 6),  // m
            (0b10101000_00000000_00000000_00000000, 6),  // n

            // 111
            (0b00111000_00000000_00000000_00000000, 5),  // o
            (0b10101100_00000000_00000000_00000000, 6),  // p
            (0b11101100_00000000_00000000_00000000, 7),  // q
            (0b10110000_00000000_00000000_00000000, 6),  // r
            (0b01000000_00000000_00000000_00000000, 5),  // s
            (0b01001000_00000000_00000000_00000000, 5),  // t
            (0b10110100_00000000_00000000_00000000, 6),  // u
            (0b11101110_00000000_00000000_00000000, 7),  // v
            (0b11110000_00000000_00000000_00000000, 7),  // w
            (0b11110010_00000000_00000000_00000000, 7),  // x

            // 121
            (0b11110100_00000000_00000000_00000000, 7),  // y
            (0b11110110_00000000_00000000_00000000, 7),  // z
            (0b11111111_11111100_00000000_00000000, 15), // {
            (0b11111111_10000000_00000000_00000000, 11), // |
            (0b11111111_11110100_00000000_00000000, 14), // }
            (0b11111111_11101000_00000000_00000000, 13), // ~
            (0b11111111_11111111_11111111_11000000, 28),
            (0b11111111_11111110_01100000_00000000, 20),
            (0b11111111_11111111_01001000_00000000, 22),
            (0b11111111_11111110_01110000_00000000, 20),

            // 131
            (0b11111111_11111110_10000000_00000000, 20),
            (0b11111111_11111111_01001100_00000000, 22),
            (0b11111111_11111111_01010000_00000000, 22),
            (0b11111111_11111111_01010100_00000000, 22),
            (0b11111111_11111111_10110010_00000000, 23),
            (0b11111111_11111111_01011000_00000000, 22),
            (0b11111111_11111111_10110100_00000000, 23),
            (0b11111111_11111111_10110110_00000000, 23),
            (0b11111111_11111111_10111000_00000000, 23),
            (0b11111111_11111111_10111010_00000000, 23),

            // 141
            (0b11111111_11111111_10111100_00000000, 23),
            (0b11111111_11111111_11101011_00000000, 24),
            (0b11111111_11111111_10111110_00000000, 23),
            (0b11111111_11111111_11101100_00000000, 24),
            (0b11111111_11111111_11101101_00000000, 24),
            (0b11111111_11111111_01011100_00000000, 22),
            (0b11111111_11111111_11000000_00000000, 23),
            (0b11111111_11111111_11101110_00000000, 24),
            (0b11111111_11111111_11000010_00000000, 23),
            (0b11111111_11111111_11000100_00000000, 23),

            // 151
            (0b11111111_11111111_11000110_00000000, 23),
            (0b11111111_11111111_11001000_00000000, 23),
            (0b11111111_11111110_11100000_00000000, 21),
            (0b11111111_11111111_01100000_00000000, 22),
            (0b11111111_11111111_11001010_00000000, 23),
            (0b11111111_11111111_01100100_00000000, 22),
            (0b11111111_11111111_11001100_00000000, 23),
            (0b11111111_11111111_11001110_00000000, 23),
            (0b11111111_11111111_11101111_00000000, 24),
            (0b11111111_11111111_01101000_00000000, 22),

            // 161
            (0b11111111_11111110_11101000_00000000, 21),
            (0b11111111_11111110_10010000_00000000, 20),
            (0b11111111_11111111_01101100_00000000, 22),
            (0b11111111_11111111_01110000_00000000, 22),
            (0b11111111_11111111_11010000_00000000, 23),
            (0b11111111_11111111_11010010_00000000, 23),
            (0b11111111_11111110_11110000_00000000, 21),
            (0b11111111_11111111_11010100_00000000, 23),
            (0b11111111_11111111_01110100_00000000, 22),
            (0b11111111_11111111_01111000_00000000, 22),

            // 171
            (0b11111111_11111111_11110000_00000000, 24),
            (0b11111111_11111110_11111000_00000000, 21),
            (0b11111111_11111111_01111100_00000000, 22),
            (0b11111111_11111111_11010110_00000000, 23),
            (0b11111111_11111111_11011000_00000000, 23),
            (0b11111111_11111111_00000000_00000000, 21),
            (0b11111111_11111111_00001000_00000000, 21),
            (0b11111111_11111111_10000000_00000000, 22),
            (0b11111111_11111111_00010000_00000000, 21),
            (0b11111111_11111111_11011010_00000000, 23),

            // 181
            (0b11111111_11111111_10000100_00000000, 22),
            (0b11111111_11111111_11011100_00000000, 23),
            (0b11111111_11111111_11011110_00000000, 23),
            (0b11111111_11111110_10100000_00000000, 20),
            (0b11111111_11111111_10001000_00000000, 22),
            (0b11111111_11111111_10001100_00000000, 22),
            (0b11111111_11111111_10010000_00000000, 22),
            (0b11111111_11111111_11100000_00000000, 23),
            (0b11111111_11111111_10010100_00000000, 22),
            (0b11111111_11111111_10011000_00000000, 22),

            // 191
            (0b11111111_11111111_11100010_00000000, 23),
            (0b11111111_11111111_11111000_00000000, 26),
            (0b11111111_11111111_11111000_01000000, 26),
            (0b11111111_11111110_10110000_00000000, 20),
            (0b11111111_11111110_00100000_00000000, 19),
            (0b11111111_11111111_10011100_00000000, 22),
            (0b11111111_11111111_11100100_00000000, 23),
            (0b11111111_11111111_10100000_00000000, 22),
            (0b11111111_11111111_11110110_00000000, 25),
            (0b11111111_11111111_11111000_10000000, 26),

            // 201
            (0b11111111_11111111_11111000_11000000, 26),
            (0b11111111_11111111_11111001_00000000, 26),
            (0b11111111_11111111_11111011_11000000, 27),
            (0b11111111_11111111_11111011_11100000, 27),
            (0b11111111_11111111_11111001_01000000, 26),
            (0b11111111_11111111_11110001_00000000, 24),
            (0b11111111_11111111_11110110_10000000, 25),
            (0b11111111_11111110_01000000_00000000, 19),
            (0b11111111_11111111_00011000_00000000, 21),
            (0b11111111_11111111_11111001_10000000, 26),

            // 211
            (0b11111111_11111111_11111100_00000000, 27),
            (0b11111111_11111111_11111100_00100000, 27),
            (0b11111111_11111111_11111001_11000000, 26),
            (0b11111111_11111111_11111100_01000000, 27),
            (0b11111111_11111111_11110010_00000000, 24),
            (0b11111111_11111111_00100000_00000000, 21),
            (0b11111111_11111111_00101000_00000000, 21),
            (0b11111111_11111111_11111010_00000000, 26),
            (0b11111111_11111111_11111010_01000000, 26),
            (0b11111111_11111111_11111111_11010000, 28),

            // 221
            (0b11111111_11111111_11111100_01100000, 27),
            (0b11111111_11111111_11111100_10000000, 27),
            (0b11111111_11111111_11111100_10100000, 27),
            (0b11111111_11111110_11000000_00000000, 20),
            (0b11111111_11111111_11110011_00000000, 24),
            (0b11111111_11111110_11010000_00000000, 20),
            (0b11111111_11111111_00110000_00000000, 21),
            (0b11111111_11111111_10100100_00000000, 22),
            (0b11111111_11111111_00111000_00000000, 21),
            (0b11111111_11111111_01000000_00000000, 21),

            // 231
            (0b11111111_11111111_11100110_00000000, 23),
            (0b11111111_11111111_10101000_00000000, 22),
            (0b11111111_11111111_10101100_00000000, 22),
            (0b11111111_11111111_11110111_00000000, 25),
            (0b11111111_11111111_11110111_10000000, 25),
            (0b11111111_11111111_11110100_00000000, 24),
            (0b11111111_11111111_11110101_00000000, 24),
            (0b11111111_11111111_11111010_10000000, 26),
            (0b11111111_11111111_11101000_00000000, 23),
            (0b11111111_11111111_11111010_11000000, 26),

            // 241
            (0b11111111_11111111_11111100_11000000, 27),
            (0b11111111_11111111_11111011_00000000, 26),
            (0b11111111_11111111_11111011_01000000, 26),
            (0b11111111_11111111_11111100_11100000, 27),
            (0b11111111_11111111_11111101_00000000, 27),
            (0b11111111_11111111_11111101_00100000, 27),
            (0b11111111_11111111_11111101_01000000, 27),
            (0b11111111_11111111_11111101_01100000, 27),
            (0b11111111_11111111_11111111_11100000, 28),
            (0b11111111_11111111_11111101_10000000, 27),

            // 251
            (0b11111111_11111111_11111101_10100000, 27),
            (0b11111111_11111111_11111101_11000000, 27),
            (0b11111111_11111111_11111101_11100000, 27),
            (0b11111111_11111111_11111110_00000000, 27),
            (0b11111111_11111111_11111011_10000000, 26),
            (0b11111111_11111111_11111111_11111100, 30)
        };

        private static readonly (byte codeLength, int codeMax, int mask, byte[] codes)[] s_decodingTable = new[]
        {
            ((byte)05, 00000000_10, int.MinValue >> (05 - 1), new[] { (byte)048, (byte)049, (byte)050, (byte)097, (byte)099, (byte)101, (byte)105, (byte)111, (byte)115, (byte)116 }), // deltaLength must be 0 for related optimizations to work
            ((byte)06, 00000000_46, int.MinValue >> (06 - 1), new[] { (byte)032, (byte)037, (byte)045, (byte)046, (byte)047, (byte)051, (byte)052, (byte)053, (byte)054, (byte)055, (byte)056, (byte)057, (byte)061, (byte)065, (byte)095, (byte)098, (byte)100, (byte)102, (byte)103, (byte)104, (byte)108, (byte)109, (byte)110, (byte)112, (byte)114, (byte)117 }),
            ((byte)07, 0000000_124, int.MinValue >> (07 - 1), new[] { (byte)058, (byte)066, (byte)067, (byte)068, (byte)069, (byte)070, (byte)071, (byte)072, (byte)073, (byte)074, (byte)075, (byte)076, (byte)077, (byte)078, (byte)079, (byte)080, (byte)081, (byte)082, (byte)083, (byte)084, (byte)085, (byte)086, (byte)087, (byte)089, (byte)106, (byte)107, (byte)113, (byte)118, (byte)119, (byte)120, (byte)121, (byte)122 }),
            ((byte)08, 0000000_254, int.MinValue >> (08 - 1), new[] { (byte)038, (byte)042, (byte)044, (byte)059, (byte)088, (byte)090 }),
            ((byte)10, 000000_1021, int.MinValue >> (10 - 1), new[] { (byte)033, (byte)034, (byte)040, (byte)041, (byte)063 }),
            ((byte)11, 000000_2045, int.MinValue >> (11 - 1), new[] { (byte)039, (byte)043, (byte)124 }),
            ((byte)12, 000000_4092, int.MinValue >> (12 - 1), new[] { (byte)035, (byte)062 }),
            ((byte)13, 000000_8190, int.MinValue >> (13 - 1), new[] { (byte)000, (byte)036, (byte)064, (byte)091, (byte)093, (byte)126 }),
            ((byte)14, 00000_16382, int.MinValue >> (14 - 1), new[] { (byte)094, (byte)125 }),
            ((byte)15, 00000_32767, int.MinValue >> (15 - 1), new[] { (byte)060, (byte)096, (byte)123 }),
            ((byte)19, 0000_524275, int.MinValue >> (19 - 1), new[] { (byte)092, (byte)195, (byte)208 }),
            ((byte)20, 000_1048558, int.MinValue >> (20 - 1), new[] { (byte)128, (byte)130, (byte)131, (byte)162, (byte)184, (byte)194, (byte)224, (byte)226 }),
            ((byte)21, 000_2097129, int.MinValue >> (21 - 1), new[] { (byte)153, (byte)161, (byte)167, (byte)172, (byte)176, (byte)177, (byte)179, (byte)209, (byte)216, (byte)217, (byte)227, (byte)229, (byte)230 }),
            ((byte)22, 000_4194284, int.MinValue >> (22 - 1), new[] { (byte)129, (byte)132, (byte)133, (byte)134, (byte)136, (byte)146, (byte)154, (byte)156, (byte)160, (byte)163, (byte)164, (byte)169, (byte)170, (byte)173, (byte)178, (byte)181, (byte)185, (byte)186, (byte)187, (byte)189, (byte)190, (byte)196, (byte)198, (byte)228, (byte)232, (byte)233 }),
            ((byte)23, 000_8388597, int.MinValue >> (23 - 1), new[] { (byte)001, (byte)135, (byte)137, (byte)138, (byte)139, (byte)140, (byte)141, (byte)143, (byte)147, (byte)149, (byte)150, (byte)151, (byte)152, (byte)155, (byte)157, (byte)158, (byte)165, (byte)166, (byte)168, (byte)174, (byte)175, (byte)180, (byte)182, (byte)183, (byte)188, (byte)191, (byte)197, (byte)231, (byte)239 }),
            ((byte)24, 00_16777206, int.MinValue >> (24 - 1), new[] { (byte)009, (byte)142, (byte)144, (byte)145, (byte)148, (byte)159, (byte)171, (byte)206, (byte)215, (byte)225, (byte)236, (byte)237 }),
            ((byte)25, 00_33554416, int.MinValue >> (25 - 1), new[] { (byte)199, (byte)207, (byte)234, (byte)235 }),
            ((byte)26, 00_67108847, int.MinValue >> (26 - 1), new[] { (byte)192, (byte)193, (byte)200, (byte)201, (byte)202, (byte)205, (byte)210, (byte)213, (byte)218, (byte)219, (byte)238, (byte)240, (byte)242, (byte)243, (byte)255 }),
            ((byte)27, 0_134217713, int.MinValue >> (27 - 1), new[] { (byte)203, (byte)204, (byte)211, (byte)212, (byte)214, (byte)221, (byte)222, (byte)223, (byte)241, (byte)244, (byte)245, (byte)246, (byte)247, (byte)248, (byte)250, (byte)251, (byte)252, (byte)253, (byte)254 }),
            ((byte)28, 0_268435455, int.MinValue >> (28 - 1), new[] { (byte)002, (byte)003, (byte)004, (byte)005, (byte)006, (byte)007, (byte)008, (byte)011, (byte)012, (byte)014, (byte)015, (byte)016, (byte)017, (byte)018, (byte)019, (byte)020, (byte)021, (byte)023, (byte)024, (byte)025, (byte)026, (byte)027, (byte)028, (byte)029, (byte)030, (byte)031, (byte)127, (byte)220, (byte)249 }),
            ((byte)30, 1_073741824, int.MinValue >> (30 - 1), new[] { (byte)010, (byte)013, (byte)022, (byte)0 /* 256: Special handling in code */ })
        };

        private static readonly (byte codeLength, int codeMax, int mask, byte[] codes)[] s_decodingTable1;

        static HuffmanOptimizedCodeAndTable()
        {
        }

        // Location of final cell in s_decodingTable
        private static readonly (int i, int j) s_last = (s_decodingTable.Length - 1, s_decodingTable[s_decodingTable.Length - 1].codes.Length - 1);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public static (uint encoded, int bitLength) Encode(int data) => s_encodingTable[data];

        /// <summary>
        /// Decodes a Huffman encoded string from a byte array.
        /// </summary>
        /// <param name="src">The source byte array containing the encoded data.</param>
        /// <param name="offset">The offset in the byte array where the coded data starts.</param>
        /// <param name="count">The number of bytes to decode.</param>
        /// <param name="dst">The destination byte array to store the decoded data.</param>
        /// <returns>The number of decoded symbols.</returns>
        public static int Decode(byte[] src, int offset, int count, byte[] dst)
        {
            var i = offset;
            var j = 0;
            var lastDecodedBits = 0;
            var edgeIndex = count - 1;

            while (i <= edgeIndex)
            {
                var next = (uint)(src[i] << 24 + lastDecodedBits);
                if (i + 1 < src.Length)
                {
                    next |= (uint)(src[i + 1] << 16 + lastDecodedBits);

                    if (i + 2 < src.Length)
                    {
                        next |= (uint)(src[i + 2] << 8 + lastDecodedBits);

                        if (i + 3 < src.Length)
                        {
                            next |= (uint)(src[i + 3] << lastDecodedBits);
                        }
                    }
                }

                var remainingBits = 8 - lastDecodedBits;

                if (i == edgeIndex && lastDecodedBits > 0)
                {
                    // The remaining 7 or less bits are all 1, which is padding.
                    // We specifically check that lastDecodedBits > 0 because padding
                    // longer than 7 bits should be treated as a decoding error.
                    // http://httpwg.org/specs/rfc7541.html#rfc.section.5.2
                    var ones = (uint)(int.MinValue >> remainingBits - 1);
                    if ((next & ones) == ones)
                        break;
                }

                if (j == dst.Length)
                {
                    // Destination is too small.
                    throw new HuffmanDecodingException();
                }

                // The longest possible symbol size is 30 bits. If we're at the last 4 bytes
                // of the input, we need to make sure we pass the correct number of valid bits
                // left, otherwise the trailing 0s in next may form a valid symbol.
                var validBits = remainingBits + (edgeIndex - i) * 8;
                if (validBits > 30)
                    validBits = 30; // Equivalent to Math.Min(30, validBits)

                var ch = Decode(next, validBits, out var decodedBits);

                if (ch == -1 || ch == 256)
                {
                    // -1: No valid symbol could be decoded with the bits in next.

                    // 256: A Huffman-encoded string literal containing the EOS symbol MUST be treated as a decoding error.
                    // http://httpwg.org/specs/rfc7541.html#rfc.section.5.2
                    throw new HuffmanDecodingException();
                }

                dst[j++] = (byte)ch;

                // If we crossed a byte boundary, advance i so we start at the next byte that's not fully decoded.
                lastDecodedBits += decodedBits;
                i += lastDecodedBits / 8;

                // Modulo 8 since we only care about how many bits were decoded in the last byte that we processed.
                lastDecodedBits %= 8;
            }

            return j;
        }

        /// <summary>
        /// Decodes a single symbol from a 32-bit word.
        /// </summary>
        /// <param name="data">A 32-bit word containing a Huffman encoded symbol.</param>
        /// <param name="validBits">
        /// The number of bits in <paramref name="data"/> that may contain an encoded symbol.
        /// This is not the exact number of bits that encode the symbol. Instead, it prevents
        /// decoding the lower bits of <paramref name="data"/> if they don't contain any
        /// encoded data.
        /// </param>
        /// <param name="decodedBits">The number of bits decoded from <paramref name="data"/>.</param>
        /// <returns>The decoded symbol.</returns>
        public static int Decode(uint data, int validBits, out int decodedBits)
        {
            // The code below implements the decoding logic for a canonical Huffman code.
            //
            // To decode a symbol, we scan the decoding table, which is sorted by ascending symbol bit length.
            // For each bit length b, we determine the maximum b-bit encoded value, plus one (that is codeMax).
            // This is done with the following logic:
            //
            // if we're at the first entry in the table,
            //    codeMax = the # of symbols encoded in b bits
            // else,
            //    left-shift codeMax by the difference between b and the previous entry's bit length,
            //    then increment codeMax by the # of symbols encoded in b bits
            //
            // Next, we look at the value v encoded in the highest b bits of data. If v is less than codeMax,
            // those bits correspond to a Huffman encoded symbol. We find the corresponding decoded
            // symbol in the list of values associated with bit length b in the decoding table by indexing it
            // with codeMax - v.

            var result = -1;
            decodedBits = 0;

            for (var i = 0; i < s_decodingTable.Length; i++)
            {
                var (codeLength, codeMax, mask, codes) = s_decodingTable[i];
                if (codeLength > validBits)
                    break;

                var masked = (data & mask) >> (32 - codeLength);

                if (masked < codeMax)
                {
                    decodedBits = codeLength;
                    var j = codes.Length - (codeMax - masked);

                    /* 256: Special handling in code */
                    result = (i == s_last.i && j == s_last.j) ? 256 : codes[j];
                    break;
                }
            }

            return result;
        }
    }
}